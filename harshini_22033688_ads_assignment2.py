# -*- coding: utf-8 -*-
"""Harshini_22033688_ADS_Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwMbJYHggFWgEhOtDB3g8wzJD7Rhylp7
"""

import pandas as pd
import seaborn as sns
def output(filename):  ######## This function takes filename as argument and returns the contents of the file as dataframe
    df = pd.read_csv(filename)
    return df
df = output(r"World Bank Repository.csv")

df.info() #### Dataframe information

df['Indicator Name'].value_counts()  ##### Returns the counts of all the Indicator names corresponding to each country.

df['Country Name'].value_counts()   #### Returns count of each country. The counts correspond to number of indicator names

######## This cell contains code for analysis of the indicator total population
######## We clean the dataset by dropping all the nan values. For exploring the data analysis we take 7 countries.
######## Correlation between each country is computed and a heatmap is plotted for visual understanding of the data
######## Also statistical analysis is done on the data which includes calculating mean, standard deviation, min, max and others
######## Also for each country data over the years 1990-2020 is plotted.

df_total_population = df.loc[df['Indicator Name'] == 'Population, total']
#print(df_total_population)
df_total_population = df_total_population.drop(columns=['Country Code', 'Indicator Name', 'Indicator Code','1960','1961',
                                                       '1962','1963','1964','1965','1966','1967','1968','1969','1970','1971',
                                                       '1972','1973','1974','1975','1976','1977','1978','1979','1980','1981',
                                                       '1982','1983','1984','1985','1986','1987','1988','1989'])
df_total_population = df_total_population.dropna(how='any')
df_total_population = df_total_population.reset_index(drop=True)
df_total_population_t = df_total_population.set_index('Country Name').T
urban_x = df_total_population_t[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']].describe()
print(urban_x)
df_total_population_t = df_total_population_t[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']]
corrurban = df_total_population_t.corr()
print(corrurban)
sns.heatmap(corrurban,cmap="Blues", annot=True)
df_total_population_t.plot()

######## This cell contains code for analysis of the indicator CO2 emissions from liquid fuel
######## We clean the dataset by dropping all the nan values. For exploring the data analysis we take 7 countries.
######## Correlation between each country is computed and a heatmap is plotted for visual understanding of the data
######## Also statistical analysis is done on the data which includes calculating mean, standard deviation, min, max and others
######## Also for each country data over the years 1990-2020 is plotted.

df_primary = df.loc[df['Indicator Name'] == 'CO2 emissions from liquid fuel consumption (kt)']
df_primary = df_primary.drop(columns=['Country Code', 'Indicator Name', 'Indicator Code','1960','1961',
                                                       '1962','1963','1964','1965','1966','1967','1968','1969','1970','1971',
                                                       '1972','1973','1974','1975','1976','1977','1978','1979','1980','1981',
                                                       '1982','1983','1984','1985','1986','1987','1988','1989'])
df_primary = df_primary.reset_index(drop=True)
df_primary = df_primary.set_index('Country Name').T
primary_x = df_primary[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']].describe()
print(primary_x)
df_primary = df_primary[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']]
corrprimary = df_primary.corr()
print(corrprimary)
sns.heatmap(corrprimary,cmap="Blues", annot=True)
df_primary.plot()

######## This cell contains code for analysis of the indicator cereal yield
######## We clean the dataset by dropping all the nan values. For exploring the data analysis we take 7 countries.
######## Correlation between each country is computed and a heatmap is plotted for visual understanding of the data
######## Also statistical analysis is done on the data which includes calculating mean, standard deviation, min, max and others
######## Also for each country data over the years 1990-2020 is plotted.

df_cereal = df.loc[df['Indicator Name'] == 'Cereal yield (kg per hectare)']
df_cereal = df_cereal.drop(columns=['Country Code', 'Indicator Name', 'Indicator Code','1960','1961',
                                                       '1962','1963','1964','1965','1966','1967','1968','1969','1970','1971',
                                                       '1972','1973','1974','1975','1976','1977','1978','1979','1980','1981',
                                                       '1982','1983','1984','1985','1986','1987','1988','1989'])
df_cereal = df_cereal.reset_index(drop=True)
df_cereal = df_cereal.set_index('Country Name').T
cereal_x = df_cereal[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']].describe()
print(cereal_x)
df_cereal = df_cereal[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']]
corrable = df_cereal.corr()
print(corrable)
sns.heatmap(corrable,cmap="Blues", annot=True)
df_cereal.plot()

######## This cell contains code for analysis of the indicator agricultural land
######## We clean the dataset by dropping all the nan values. For exploring the data analysis we take 6 countries.
######## Correlation between each country is computed and a heatmap is plotted for visual understanding of the data
######## Also statistical analysis is done on the data which includes calculating mean, standard deviation, min, max and others
######## Also for each country data over the years 1990-2020 is plotted.

df_agri = df.loc[df['Indicator Name'] == 'Arable land (% of land area)']
df_agri = df_agri.drop(columns=['Country Code', 'Indicator Name', 'Indicator Code','1960','1961',
                                                       '1962','1963','1964','1965','1966','1967','1968','1969','1970','1971',
                                                       '1972','1973','1974','1975','1976','1977','1978','1979','1980','1981',
                                                       '1982','1983','1984','1985','1986','1987','1988','1989'])
df_agri = df_agri.reset_index(drop=True)
df_agri = df_agri.set_index('Country Name').T
agri_x = df_agri[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']].describe()
print(agri_x)
df_agri = df_agri[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']]
corragri = df_agri.corr()
print(corragri)
sns.heatmap(corragri,cmap="Blues", annot=True)
df_agri.plot()

######## This cell contains code for analysis of the indicator forest area
######## We clean the dataset by dropping all the nan values. For exploring the data analysis we take 6 countries.
######## Correlation between each country is computed and a heatmap is plotted for visual understanding of the data
######## Also statistical analysis is done on the data which includes calculating mean, standard deviation, min, max and others
######## Also for each country data over the years 1990-2020 is plotted.

df_forest = df.loc[df['Indicator Name'] == 'Forest area (% of land area)']
df_forest = df_forest.drop(columns=['Country Code', 'Indicator Name', 'Indicator Code','1960','1961',
                                                       '1962','1963','1964','1965','1966','1967','1968','1969','1970','1971',
                                                       '1972','1973','1974','1975','1976','1977','1978','1979','1980','1981',
                                                       '1982','1983','1984','1985','1986','1987','1988','1989'])
df_forest = df_forest.reset_index(drop=True)
df_forest = df_forest.set_index('Country Name').T
forest = df_forest[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']].describe()
print(forest)
df_forest = df_forest[['Malaysia','North America','Zimbabwe','India','Canada','China','Germany']]
corrM = df_forest.corr()
print(corrM)
sns.heatmap(corrM,cmap="Blues", annot=True)
df_forest.plot()

### This cell calculates the correlation of all 7 countries between arable land and forest land

df_agri.corrwith(df_forest, axis = 0)

### This cell calculates the correlation of all 7 countries between total population and cereal yield

df_total_population_t.corrwith(df_cereal, axis = 0)

### This cell calculates the correlation of all 7 countries between Total Population and CO2 emissions from liquid fuel

df_total_population_t.corrwith(df_primary, axis = 0)